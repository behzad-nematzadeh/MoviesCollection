// Mocks generated by Mockito 5.0.16 from annotations
// in moviescollection/test/src/presentation/blocs/movie_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviescollection/core/error/failures.dart' as _i6;
import 'package:moviescollection/src/domain/entities/movie.dart' as _i7;
import 'package:moviescollection/src/domain/entities/pagination.dart' as _i9;
import 'package:moviescollection/src/domain/entities/post_movie.dart' as _i12;
import 'package:moviescollection/src/domain/repositories/movie_repository.dart'
    as _i2;
import 'package:moviescollection/src/domain/usecases/add_movie.dart' as _i11;
import 'package:moviescollection/src/domain/usecases/get_movie_info.dart'
    as _i4;
import 'package:moviescollection/src/domain/usecases/get_movies.dart' as _i8;
import 'package:moviescollection/src/domain/usecases/get_movies_by_genre_id.dart'
    as _i10;
import 'package:moviescollection/src/domain/usecases/search_movies.dart'
    as _i13;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieRepository_0 extends _i1.Fake implements _i2.MovieRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetMovieInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieInfo extends _i1.Mock implements _i4.GetMovieInfo {
  MockGetMovieInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Movie>> call(
          _i4.GetMovieInfoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.Movie>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Movie>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Movie>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovies extends _i1.Mock implements _i8.GetMovies {
  MockGetMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.Pagination>> call(
          _i8.GetMoviesParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i9.Pagination>>.value(
              _FakeEither_1<_i6.Failure, _i9.Pagination>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i9.Pagination>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetMoviesByGenreId].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoviesByGenreId extends _i1.Mock
    implements _i10.GetMoviesByGenreId {
  MockGetMoviesByGenreId() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.Pagination>> call(
          _i10.GetMoviesByGenreIdParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i9.Pagination>>.value(
              _FakeEither_1<_i6.Failure, _i9.Pagination>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i9.Pagination>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AddMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddMovie extends _i1.Mock implements _i11.AddMovie {
  MockAddMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i12.PostMovie>> call(
          _i11.AddMovieParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i12.PostMovie>>.value(
              _FakeEither_1<_i6.Failure, _i12.PostMovie>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i12.PostMovie>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i13.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.Pagination>> call(
          _i13.SearchMoviesParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i6.Failure, _i9.Pagination>>.value(
              _FakeEither_1<_i6.Failure, _i9.Pagination>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i9.Pagination>>);
  @override
  String toString() => super.toString();
}
